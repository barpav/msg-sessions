// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/barpav/msg-sessions/internal/rest/models"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// EndAllSessions provides a mock function with given fields: ctx, userId
func (_m *Storage) EndAllSessions(ctx context.Context, userId string) error {
	ret := _m.Called(ctx, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EndSession provides a mock function with given fields: ctx, userId, sessionId
func (_m *Storage) EndSession(ctx context.Context, userId string, sessionId int64) error {
	ret := _m.Called(ctx, userId, sessionId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, userId, sessionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartNewSession provides a mock function with given fields: ctx, userId, ip, agent
func (_m *Storage) StartNewSession(ctx context.Context, userId string, ip string, agent string) (int64, string, error) {
	ret := _m.Called(ctx, userId, ip, agent)

	var r0 int64
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (int64, string, error)); ok {
		return rf(ctx, userId, ip, agent)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) int64); ok {
		r0 = rf(ctx, userId, ip, agent)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) string); ok {
		r1 = rf(ctx, userId, ip, agent)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(ctx, userId, ip, agent)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserSessionsV1 provides a mock function with given fields: ctx, userId
func (_m *Storage) UserSessionsV1(ctx context.Context, userId string) (*models.UserSessionsV1, error) {
	ret := _m.Called(ctx, userId)

	var r0 *models.UserSessionsV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.UserSessionsV1, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.UserSessionsV1); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserSessionsV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
